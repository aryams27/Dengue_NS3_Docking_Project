# -*- coding: utf-8 -*-
"""Docking_Binding_Affinity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VcsDnLM0BM-3jU4bid4L3EXPDAJqbySg
"""

#Step 1: Install dependencies
!pip install vina
!apt-get install -y autodock-vina

#Step 2: Upload your protein and ligand files
from google.colab import files
uploaded = files.upload() # Upload protein.pdbqt and ligand.pdbqt
# If you have multiple ligands as a zip file
!unzip ligands.zip -d ligands/

#Step 2: Upload your protein and ligand files
from google.colab import files
uploaded = files.upload() # Upload protein.pdbqt and ligand.pdbqt
# If you have multiple ligands as a zip file
# !unzip ligands.zip -d ligands/

#Step 3: Docking script for single ligand
from vina import Vina
import os

# Define input filenames
receptor_file = '/content/NS3_model.pdbqt'
ligand_file = '/content/Simeprevir.pdbqt'
corrected_receptor_file = '/content/NS3_model_corrected.pdbqt'

# Attempt to fix the PDBQT receptor file by removing lines that don't contain atom information
try:
    with open(receptor_file, 'r') as infile, open(corrected_receptor_file, 'w') as outfile:
        for line in infile:
            # Keep lines that start with 'ATOM', 'HETATM', or 'END'
            if line.startswith('ATOM') or line.startswith('HETATM') or line.startswith('END'):
                outfile.write(line)

    print(f"Corrected PDBQT receptor file created as {corrected_receptor_file}")

except FileNotFoundError:
    print(f"Error: Receptor file not found at {receptor_file}")
    # Optionally exit or handle the error appropriately
    exit() # Or you could skip docking and continue with other tasks

v = Vina(sf_name='vina')

# Use the corrected receptor file
v.set_receptor(corrected_receptor_file)
v.set_ligand_from_file(ligand_file)

# Define docking box (adjust values for your protein binding site)
# Make sure these values are appropriate for your specific protein
center = [10,20,30]
box_size = [20,20,20]

# Compute affinity maps for the receptor
v.compute_vina_maps(center=center, box_size=box_size)

# Perform docking
v.dock(exhaustiveness=8, n_poses=10)

# Write the docking poses to a file
output_docked_file = 'docked_ligand.pdbqt'
v.write_poses(output_docked_file, n_poses=5, overwrite=True)

print(f"Docking completed. Docked poses saved to {output_docked_file}")

# Print the docking scores
print("Docking Scores:", v.poses(n_poses=5))